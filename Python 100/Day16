def bubble_sort(list):
	for i in range(len(list)-1):
		for j in range(len(list)-1-i):
			if list[j]>list[j+1]:
				list[j],list[j+1]=list[j+1],list[j]
	return list
	

def selected_sort(list):
	for i in range(len(list)-1):
		min_index=i
		for j in range(i+1,len(list)):
			if list[min_index]>list[j]:
				min_index=j
		list[min_index],list[i]=list[i],list[min_index]
	return list

#recursion sorted
def merge(list_1,list_2):
	index_1,index_2=0,0
	merged_list=[]
	while index_1<len(list_1) and index_2<len(list_2):
		if list_1[index_1]>list_2[index_2]:
			merged_list.append(list_1[index_1])
			index_1+=1
		else:
			merged_list.append(list_2[index_2])
			index_2+=1
	merged_list+=list_1[index_1:]
	merged_list+=list_2[index_2:]
	return merged_list

def recursion_sorted(list,comp=lambda x,y :x<y):
	if len(list)<2:
		return list
	mid=len(list)//2
	left=recursion_sorted(list[:mid],comp)
	right=recursion_sorted(list[mid:],comp)
	return merge(left,right)
	
def quick_sort(list,left,right):
    if left<right:
        i=left
        j=right
        pivot=list[left]
        while i<j:
            while list[j]>=pivot and i<j:
                j-=1
            while list[i]<=pivot and i<j:
                i+=1
            list[i],list[j]=list[j],list[i]
        list[left]=list[i]
        list[i]=pivot
        quick_sort(list,left,i-1)
        quick_sort(list,i+1,right)
    return list
